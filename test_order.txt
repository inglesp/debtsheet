Utils
  .parse_amount
    can parse amount with two decimal places
    can parse amount with no decimal places
    can parse amount with dot followed by two decimal places
    raises AmountParsingError on invalid input

Event
  .create_payment
    when called with valid input
      creates new event with event_type 'payment'
      sets the date on the new event
      creates one transfer with a positive amount
      creates one transfer with a negative amount
      creates one transfer for payer
      creates one transfer for payee
      transfer with positive amount
        belongs to payer's account
        has correct amount_cents
      transfer with negative amount
        belongs to payee's account
        has correct amount_cents

Utils
  .split_amount_cents
    can split an amount evenly between buckets
    can split an amount unevenly between buckets
    splits unevenly at random

Event
  .create_purchase
    when called with valid input
      creates new event with event_type 'purchase'
      sets the date on the new event
      creates one transfer with a positive amount
      creates one transfer with a negative amount for each account
      creates two transfers for purchaser
      creates one transfer for other accounts
      transfer with positive amount
        belongs to purchaser's account
        has correct amount_cents
      transfers with negative amount
        belong to each account
        have correct amount_cents

# Now enable seeds.rb

Event
  #payee
    returns payee account
    when event is not payment
      raises exception
  #payer
    returns payer account
    when event is not payment
      raises exception
  #purchaser
    returns purchaser account
    when event is not purchase
      raises exception

Account
  #balance_cents
    returns the sum of the amounts for each transfer
  #summary
    when account is owed money
      returns how much they are owed
    when account owes money
      returns how much they owe
    when account owes no money
      returns 'is in balance'

AccountsController
  GET index
    is successful

Accounts
  User visits list of accounts

Transfer
  #date
    returns date of event
  #description
    for payment
      from payer's perspective
        describes payment to payee
      from payee's perspective
        describes payment from payer
    for purchase
      from purchaser's perspective
        describes payment for, and share of, something
      from non-purchaser's perspective
        describes share of something

AccountsController
  GET show
    is successful

Accounts
  User visits Alice's account

XXXXXX

EventsController
  GET index
    is successful

Events
  User visits list of events

EventsController
  GET new_payment
    is successful
  POST create_payment
    with valid params
      redirects to events path
      creates a new event

Events
  User creates new payment

EventsController
  GET new_purchase
    is successful
  POST create_purchase
    with valid params
      redirects to events path
      creates a new event

Events
  User creates new purchase

AccountsController
  GET new
    is successful
  POST create
    with valid params
      redirects to accounts path
      creates a new account

Accounts
  User creates new account

Account
  validation
    requires that name is present
    requires that name is unique

AccountsController
  POST create
    with invalid params
      renders new template

Accounts
  User creates new account with invalid params

Event
  .create_payment
    when called with invalid input
      when payer_id does not exist
        raises InvalidInput
      when payee_id does not exist
        raises InvalidInput
      when payer_id equals payee_id
        raises InvalidInput
      when amount cannot be parsed
        raises InvalidInput
      when amount is not positive
        raises InvalidInput
      when date cannot be parsed
        raises InvalidInput

EventsController
  POST create_payment
    with invalid params
      renders new_payment template
      sets @error_message

Events
  User tries to create new payment with invalid input

Event
  .create_purchase
    when called with invalid input
      when purchaser_id does not exist
        raises InvalidInput
      when amount cannot be parsed
        raises InvalidInput
      when amount is not positive
        raises InvalidInput
      when date cannot be parsed
        raises InvalidInput
      when details are missing
        raises InvalidInput

EventsController
  POST create_purchase
    with invalid params
      renders new_purchase template
      sets @error_message

Events
  User tries to create new purchase with invalid input

GET /
  redirects to /accounts
